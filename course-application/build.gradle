plugins {
  id 'io.spring.dependency-management' version '1.1.0'
}

ext {
  studyVersion = '0.0.1-SNAPSHOT'
  commonVersion = "0.5.0-SNAPSHOT"
  queryDslVersion = '4.4.0'

  springBootVersion = '2.5.14'
  springCloudVersion = "2020.0.3"
  springBootGradlePluginVersion = "2.5.3"
  lombokVersion = '1.18.20'
}

allprojects {
  group 'mz.study'
  version studyVersion
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

def useMavenLocalFirst = true
def nexusBaseUrl = "http://3.35.250.189:9999/repository"
def NEXUS_ID = "mz"
def NEXUS_PASSWORD = "mz!@#123"

subprojects {
  apply plugin: 'java-library'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'maven-publish'

  sourceCompatibility = 1.11
  targetCompatibility = 1.11

  repositories {
    maven {
      credentials {
        username = NEXUS_ID //System.getenv("NEXUS_ID")
        password = NEXUS_PASSWORD //System.getenv("NEXUS_PASSWORD")
      }
      url "${nexusBaseUrl}/mz-public/"
      allowInsecureProtocol = true
    }

    if ( useMavenLocalFirst ) {
      mavenLocal()
    }
    mavenCentral()
  }

  publishing {
    repositories {
      maven {
        credentials {
          username = NEXUS_ID //System.getenv("NEXUS_ID")
          password = NEXUS_PASSWORD //System.getenv("NEXUS_PASSWORD")
        }

        def releasesRepoUrl = nexusBaseUrl + "/mz-releases"
        def snapshotsRepoUrl = nexusBaseUrl + "/mz-snapshots"

        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        allowInsecureProtocol = true
      }
    }
  }

  dependencyManagement {
    imports {
      mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
    imports {
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
  }

  dependencies {
    api ("mz:mz-common:${commonVersion}")
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.5'

    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
  }
}